@(namespace:String, importList: List[String], reqResps:List[(String,String)])package elasticsearch.client
package @{namespace}.client

import zio.json._
import com.github.plokhotnyuk.jsoniter_scala.core._
import com.github.plokhotnyuk.jsoniter_scala.macros._
import zio.elasticsearch.ZioResponse
import zio.elasticsearch.exception.FrameworkException
@for(action <- importList) {import @action
}

trait ClientActionResolver extends ClientActions {

@for(action <- reqResps) {
    def execute(
      request: @{action._1}
    ): ZIO[Any, FrameworkException, @{action._2}] =
      doCall(request).flatMap(convertResponse[@{action._2}](request))

}

 def convertResponse[T: JsonValueCodec](
    request: ActionRequest
  )(
    resp: ESResponse
  ): ZIO[Any, FrameworkException, T] = {
    import ElasticSearchSearchException._

    request match {
      case _: IndicesExistsRequest =>
        resp.status match {
          case i: Int if i >= 200 && i < 300 =>
            ZIO.succeed(IndicesExistsResponse(true).asInstanceOf[T])
          case _ =>
            ZIO.succeed(IndicesExistsResponse(false).asInstanceOf[T])
        }
      case req: DeleteRequest =>
        resp.json match {
          case Left(ex) =>
            ZIO.fail(
              ElasticSearchDeleteException(ex.message, status = resp.status)
            )
          case Right(json) =>
            json.as[DeleteResponse] match {
              case Left(ex) =>
                ZIO.fail(
                  ElasticSearchDeleteException(
                    ex.message,
                    status = resp.status
                  )
                )
              case Right(v) => ZIO.succeed(v.asInstanceOf[T])
            }
        }

      case _ =>
        resp.status match {
          case i: Int if i >= 200 && i < 300 =>
            resp.json match {
              case Left(ex) =>
                ZIO.fail(
                  ElasticSearchDeleteException(
                    ex.message,
                    status = resp.status
                  )
                )
              case Right(json) =>
                ZIO.fromEither(json.as[T].left.map(convertDecodeError))
            }
          case _ =>
            if (resp.body.nonEmpty) {
//                  logger.error(resp.body) *>
              ZIO.fail(
                ElasticSearchSearchException.buildException(resp.json.right.get, resp.status)
              )
            } else {
              ZIO.fail(
                ElasticSearchSearchException.buildException(Json.Null, resp.status)
              )
            }
        }
    }
  }

}

